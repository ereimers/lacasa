#+TITLE:   LaCasa
#+AUTHOR:  Philipp Haller

* Building

Building LaCasa requires sbt. The build consists of two steps. The
first step consists of building and packaging the LaCasa compiler
plugin:
   : sbt 'project plugin' package

The second step consists of building and running projects like
=samples= which depend on the packaged plugin. This requires starting
sbt with the =lacasa.plugin.jar= JVM system property set to the path
of the packaged plugin:
   : sbt -Dlacasa.plugin.jar=plugin/target/scala-2.11/plugin_2.11.7-0.1.0-SNAPSHOT.jar

Build and run samples:
   : > project samples
   : > run

* Testing

Once sbt has been started with the =lacasa.plugin.jar= JVM system
property set, plugin tests can be run as follows:
   : > project plugin
   : > test

The plugin tests are located in directory
=plugin/src/test/scala/lacasa/=.

* Example

The following example shows a simple ownership transfer to a
concurrent actor:

import scala.concurrent.ExecutionContext.Implicits.global
import scala.util.control.ControlThrowable
import lacasa.{System, Box, CanAccess, Actor, doNothing}
import Box._
import scala.spores._

class MyActor extends Actor[Message] {
  override def receive(box: Box[Message])
      (implicit acc: CanAccess { type C = box.C }) {
    box open { msg =>
      println(msg.arr.mkString(","))
    }
  }
}

class Message {
  var arr: Array[Int] = _
}

object Transfer {

  def main(args: Array[String]): Unit = try {
    val sys = System()
    val a = sys.actor[MyActor, Message]

    // LaCasa plugin checks that `Message` is an ocap class
    mkBox[Message] { packed =>
      import packed.access
      val box: packed.box.type = packed.box

      // initialize object in box
      box.open(spore { obj =>
        obj.arr = Array(3, 4, 5)
      })

      a.send(box) { doNothing.make(box) }
    }
  } catch {
    case t: ControlThrowable =>
      Thread.sleep(1000)
  }

}
